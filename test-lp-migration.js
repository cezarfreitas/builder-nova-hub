const { migrateHeroToLpSettings, getHeroFromLpSettings, dropHeroTable } = require('./server/database/lp-settings-migration.ts');

async function testMigration() {
  console.log('üß™ Testando migra√ß√£o do hero para lp_settings...\n');

  try {
    // 1. Executar migra√ß√£o
    console.log('1Ô∏è‚É£ Executando migra√ß√£o...');
    const migrationResult = await migrateHeroToLpSettings();
    console.log('‚úÖ Migra√ß√£o completa:', migrationResult);
    console.log('');

    // 2. Verificar dados migrados
    console.log('2Ô∏è‚É£ Verificando dados migrados...');
    const heroData = await getHeroFromLpSettings();
    console.log('‚úÖ Dados do hero encontrados em lp_settings:');
    console.log(JSON.stringify(heroData, null, 2));
    console.log('');

    // 3. Excluir tabela hero_settings
    console.log('3Ô∏è‚É£ Excluindo tabela hero_settings...');
    const dropResult = await dropHeroTable();
    console.log('‚úÖ Tabela exclu√≠da:', dropResult);
    console.log('');

    // 4. Verificar se ainda consegue ler dados ap√≥s exclus√£o da tabela
    console.log('4Ô∏è‚É£ Verificando leitura ap√≥s exclus√£o da tabela...');
    const heroDataAfter = await getHeroFromLpSettings();
    console.log('‚úÖ Dados ainda dispon√≠veis em lp_settings:');
    console.log(`- Title: ${heroDataAfter.title}`);
    console.log(`- Background Image: ${heroDataAfter.background_image}`);
    console.log(`- Logo URL: ${heroDataAfter.logo_url}`);
    console.log('');

    console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!');
    console.log('üìä Resumo:');
    console.log(`   - Dados migrados: ${migrationResult.migratedCount} configura√ß√µes`);
    console.log('   - Tabela hero_settings: exclu√≠da');
    console.log('   - Dados acess√≠veis via lp_settings: ‚úÖ');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
    process.exit(1);
  }
}

// Executar teste
testMigration().catch(console.error);
